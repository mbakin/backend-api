// Code generated by MockGen. DO NOT EDIT.
// Source: service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "backend_todo/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITodoService is a mock of ITodoService interface.
type MockITodoService struct {
	ctrl     *gomock.Controller
	recorder *MockITodoServiceMockRecorder
}

// MockITodoServiceMockRecorder is the mock recorder for MockITodoService.
type MockITodoServiceMockRecorder struct {
	mock *MockITodoService
}

// NewMockITodoService creates a new mock instance.
func NewMockITodoService(ctrl *gomock.Controller) *MockITodoService {
	mock := &MockITodoService{ctrl: ctrl}
	mock.recorder = &MockITodoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITodoService) EXPECT() *MockITodoServiceMockRecorder {
	return m.recorder
}

// AddTodo mocks base method.
func (m *MockITodoService) AddTodo(todoDescription string) *model.Todo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTodo", todoDescription)
	ret0, _ := ret[0].(*model.Todo)
	return ret0
}

// AddTodo indicates an expected call of AddTodo.
func (mr *MockITodoServiceMockRecorder) AddTodo(todoDescription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTodo", reflect.TypeOf((*MockITodoService)(nil).AddTodo), todoDescription)
}

// GetTodos mocks base method.
func (m *MockITodoService) GetTodos() []*model.Todo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodos")
	ret0, _ := ret[0].([]*model.Todo)
	return ret0
}

// GetTodos indicates an expected call of GetTodos.
func (mr *MockITodoServiceMockRecorder) GetTodos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodos", reflect.TypeOf((*MockITodoService)(nil).GetTodos))
}
